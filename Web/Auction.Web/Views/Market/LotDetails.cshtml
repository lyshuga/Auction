@model Auction.Web.Models.DetailsLotModel

@{
    ViewBag.Title = "LotDetails";
}
<script>
    var intervalOfUpdate = 1000;
    var isInputFocused = false;
    setInterval(getLotPrice, intervalOfUpdate);
    
    function makeBid() {
        isInputFocused = true;
        var form = document.getElementById("makeBidForm");
        var requestBody = objectifyForm(form);
        var xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 201) {
                document.getElementById("requestInfo").innerHTML =
                    this.responseText;
            }
        };
        xhttp.open("POST", "http://localhost:57840/Market/MakeBid", true);
        xhttp.setRequestHeader('Content-Type', 'application/json');
        xhttp.send(requestBody);
        isInputFocused = false;
        //getLotPrice();
    }

    function objectifyForm(formArray) {//serialize data function

        var formString = "{";
        for (var i = 0; i < formArray.length - 1; i++) {
            inputString = "\"" + [formArray[i]['name']] + "\":\"" + formArray[i]['value'] + "\",";
            formString = formString + inputString;
        }
        inputString += "\"" + [formArray[formArray.length - 1]['name']] + "\":\"" + formArray[formArray.length - 1]['value'] + "\"";
        formString = formString + inputString;
        return formString + "}";
    }
    function getLotPrice() {
        if (true !== isInputFocused) {
            var xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {
                    var jsonObj = JSON.parse(this.responseText);
                    document.getElementById("Price").value =
                        jsonObj.Price;
                }
            };
            xhttp.open("GET", "http://localhost:57840/Market/GetPrice/" + @Model.Id, true);
            xhttp.send();
        }
    }
</script>
<h2>Lot</h2>

<div>
    <hr />
    <div class="row">
        <div class="col-md-6">
            <img src="@String.Format("data:image/png;base64,{0}", Model.Photo)" />
        </div>
        <div class="col-md-6">
            <h3>@Html.DisplayFor(model => model.Name)</h3>
            <br />
            <p>@Html.DisplayFor(model => model.Description)</p>

            @using (Html.BeginForm("MakeBid", "Market", null, FormMethod.Post, new { @id = "makeBidForm", @class = "form-horizontal", role = "form" }))
            {
                @Html.Hidden("LotId", Model.Id)
                @Html.Hidden("BidderId", Model.BidderId)

                @Html.DisplayNameFor(model => model.Price)
                @Html.EditorFor(model => model.Price, new { @name = "Price" })

            }
            <script>
                document.getElementById('Price').onfocus = () => isInputFocused = true;
                document.getElementById('Price').onblur = () => isInputFocused = false;
            </script>
            <input type="submit" onclick="makeBid()" value="Bid" class="btn btn-default" />
            <div id="requestInfo"></div>
            <input type="submit" onclick="getLotPrice()" value="Get Actual Price" class="btn btn-default" />
        </div>
    </div>
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => model.Name)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Name)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Description)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Description)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.GoodType)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.GoodType)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Photo)
        </dt>

        <dd>
            <img src="@String.Format("data:image/png;base64,{0}", Model.Photo)" />
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Price)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Price)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.BidderName)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.BidderName)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.SellerName)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.SellerName)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.StartDate)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.StartDate)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.ExpireDate)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.ExpireDate)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.LastBid.Time)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.LastBid.Time)
        </dd>

    </dl>
</div>
<p>
    @Html.ActionLink("Edit", "Edit", new { id = Model.Id }) |
    @Html.ActionLink("Back to List", "Index")
</p>
